{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CONTRACT_ADDRESS","process","Boolean","window","location","hostname","match","ReactDOM","render","useState","currentAccount","setCurrentAccount","message","setMessage","allWaves","setAllWaves","useEffect","a","async","ethereum","console","log","request","method","accounts","length","account","getAllWaves","checkIfWalletIsConnected","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","contractABI","abi","waves","wavesCleaned","forEach","wave","push","address","waver","timestamp","Date","on","from","prevState","className","label","placeholder","value","onChange","e","target","onClick","alert","waveportalContract","getTotalWaves","count","toNumber","gasLimit","waveTxn","hash","wait","map","index","key","style","backgroundColor","marginTop","padding","toString","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84effede.chunk.js","sourcesContent":["import './App.css';\n\nimport * as React from \"react\";\n\nimport { useEffect, useState } from \"react\";\n\nimport contractABI from './utils/WavePortal.json';\nimport { ethers } from \"ethers\";\n\nconst CONTRACT_ADDRESS = process.env.REACT_APP_CONTRACT_ADDRESS ?? '0x50907a86880db87027035E906D819dAFeA387a4f'; // default public contract address\n\nexport default function App() {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [allWaves, setAllWaves] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n      try {\n          const { ethereum } = window;\n\n          if (!ethereum) {\n              console.log(\"Make sure you have metamask!\");\n              return;\n          } else {\n              console.log(\"We have the ethereum object\", ethereum);\n          }\n\n          const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n          if (accounts.length !== 0) {\n              const account = accounts[0];\n              console.log(\"Found an authorized account:\", account);\n              setCurrentAccount(account)\n              getAllWaves();\n\n          } else {\n              console.log(\"No authorized account found\")\n          }\n      } catch (error) {\n          console.log(error);\n      }\n  }\n\n  useEffect(() => {\n      checkIfWalletIsConnected();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(CONTRACT_ADDRESS, contractABI.abi, signer);\n\n        const waves = await wavePortalContract.getAllWaves();\n\n        let wavesCleaned = [];\n        waves.forEach(wave => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message\n          });\n        });\n\n        setAllWaves(wavesCleaned);\n\n        wavePortalContract.on(\"NewWave\", (from, timestamp, message) => {\n          console.log(\"NewWave\", from, timestamp, message);\n\n          setAllWaves(prevState => [...prevState, {\n            address: from,\n            timestamp: new Date(timestamp * 1000),\n            message: message\n          }]);\n        });\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const wave = async () => {\n    if(!currentAccount){\n      alert(\"Connect your MetaMask wallet to continue!\")\n    }\n    \n    if(!message){\n      alert(\"Enter message to continue!\");\n      return;\n    }\n    \n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const waveportalContract = new ethers.Contract(CONTRACT_ADDRESS, contractABI.abi, signer);\n\n        let count = await waveportalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n\n        /*\n        * Execute the actual wave from your smart contract\n        */\n        const waveTxn = await waveportalContract.wave(message, { gasLimit: 300000 });\n\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n        setMessage(\"\");\n\n        count = await waveportalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n      } else {\n        alert(\"Ethereum object doesn't exist! Please setup your Ethereum wallet, such as MetaMask to continue!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  \n  return (\n    <div className=\"mainContainer\">\n\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n        ðŸ‘‹ Hey there!\n        </div>\n\n        <div className=\"bio\">\n        I am Abhi and I'm curious about web3. This is my first smart contract on the Ethereum blockchain. Connect your Ethereum wallet and wave at me!\n        </div>\n\n        <input label=\"Message\" placeholder=\"Enter your message here, it'll be stored on the blockchain ;)\" value={message} onChange={e=>setMessage(e.target.value)} className={message?\"validInput\":\"\"}/>\n\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me\n        </button>\n        \n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n\n        {allWaves.map((wave, index) => {\n          return (\n            <div key={index} style={{ backgroundColor: \"OldLace\", marginTop: \"16px\", padding: \"8px\" }}>\n              <div>Address: {wave.address}</div>\n              <div>Time: {wave.timestamp.toString()}</div>\n              <div>Message: {wave.message}</div>\n            </div>)\n        })}\n      </div>\n\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}